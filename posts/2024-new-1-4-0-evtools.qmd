---
title: "Dynamic dosing with mrgsolve and evtools"
author: Kyle Baron
date: 2/15/2024
description: > 
  The evtools plugin is a set of functions and classes you can use to implement
  dosing regimens from _inside_ your model. It first became available in mrgsolve
  1.4.1. 
categories:
- dynamic-dosing
---

## Introduction

The `evtools` plugin is a set of functions and classes you can use to implement
dosing regimens from _inside_ your model. It first became available in mrgsolve
1.4.1.

The most common use for this plugin is when you want to implement dynamic dosing
simulations where the dose amount or the dosing interval is able to change based
on how the system has advanced up to a certain point. For example, you might
have a PKPD model for an oncology drug that includes a PK model for the drug as
well as a dynamic model for platelets where a decline in platelets is driven by
the drug concentration. In this case you might monitor platelets at different
clinical visits and reduce the or hold dose or increase the dosing interval in
response to Grade 3 or Grade 4 thrombocytopenia.

In this blog post, I'll introduce the new functionality provided by `evtools`.
This is a rather long and detailed post because I'm going to be using it to
prototype demo / documentation for these new features. I want to take the time
to touch on different aspects of `evtools` in some detail for clarity, so it
might take some time to work through the content. But each feature has a
complete working example to show you a working model and the associated
simulation output. So keep reading and see how these features might be helpful
to you in your dynamic dosing simulation work.


## Setup

```{r}
#| message: false
#| warning: false
library(mrgsolve)
library(dplyr)
library(ggplot2)
```

```{r}
#| echo: false
options(ggplot2.discrete.colour = RColorBrewer::brewer.pal(name = "Dark2", n = 8))
options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(name = "Dark2", n = 8))
theme_set(theme_bw() + theme(legend.position = "top"))
```


## Invoking `evtools`

Like any plugin, you need to opt in to using the functionality provided 
by `evtools`. Do this with the `$PLUGIN` block

```{c}
#| eval: false
$PLUGIN evtools
```

## Everything is in the `evt` namespace

All of the functionality provided by `evtools` is within a namespace called 
`evt`. To access functions, typedefs or classes in `evt`, please point to 
the namespace by prefixing with `evt::`. 

For example, there a function called `bolus()` which is located in the `evt` 
namespace. So we have to call that function with `evt::bolus()` rather than 
plain old `bolus()`. This prefixing is roughly equivalent to calling 
`dplyr::mutate()` or `purrr::map()` which is currently a popular R coding
style. 

Another example is a typedef called `evt::ev` for the C++ event objects we use
in the model. That `evt::bolus()` function an be called in a way that
_returns_ an event object. You can use the typedef in `evt` like this

```{c}
#| eval: false
evt::ev dose = evt::bolus(100, 1);
```

Then work with the `dose` object as you wish (keep reading for more
discussion about how this works). 


## Functions to administer single doses now

Users have been able to give doses from inside their mrgsolve model for a while
now. With the `evtools` plugin, this should be much easier to do, with a simple, 
easy to remember syntax. 

To trigger a single **bolus** dose of 100 units into the first compartment, call 

```{c}
#| eval: false
evt::bolus(self, 100, 1); 
```

The arguments here are 

- `self` (`databox`) - an object used by mrgsolve to communicate with the model code
- `amt` (`double`) - the dose amount
- `cmt` (`int`) - the dose compartment number

Notice there is no return value to this function; this one call specifies the 
dose and sends it back to mrgsolve via `self` to implement.

To trigger a single **infusion** of 100 units into the first compartment with 
rate of 5 units / time, call

```{c}
#| eval: false
evt::infuse(self, 100, 1, 5);
```

The signature for `evt::infuse()` is similar to `evt::bolus()`, but just 
add a `rate` argument at the end of the signature. 

- `self` (`databox`) - an object used by mrgsolve to communicate with the model code
- `amt` (`double`) - the dose amount
- `cmt` (`int`) - the dose compartment number
- `rate` (`double`) - the infusion rate

You should call `evt::bolus()` and `evt::infuse()` from `$ERROR`. 
You will also need to figure out _when_ the dose should be triggered. Writing 
the following code will give you a dose _every time $ERROR is called_

```{c}
#| eval: false
$ERROR
evt::infuse(self, 100, 1, 5);
```

This is probably not what you want. There are multiple ways you can handle this. 
The simplest way is to check `TIME` _and_ `EVID`

```{c}
#| eval: false
if(TIME==0 & EVID==0) {
  evt::infuse(self, 100, 1, 5);
}
```

This will get you a dose when `TIME==0` and `EVID==0`. I highly recommend
checking something other than just `TIME` when deciding to dose since there
may be other "events" that are taking place at the time you want to check for 
giving a dose. You can easily fire off two doses at the dose time rather than 
just the intended one dose. 

### Example

Model `evtools-1.mod` will implement a dose via `evt::infuse()`.

::: {.callout-note collapse="true" appearance="simple"}
# See the full model 1 code

```{c, code = readLines("evtools-1.mod"), eval = FALSE}
```
:::


```{r}
mod <- mread("evtools-1.mod")

out <- mrgsim(mod, end = 72, delta = 0.2) 

plot(out)
```

## Functions to administer single, customized doses

A similar set of functions will implement bolus or infusion doses, but allowing 
you to interact with the event object prior to sending it back to mrgsolve. 

To create an object for a 100 unit **bolus** dose into compartment 1, call

```{c}
#| eval: false
evt::ev dose = evt::bolus(100, 1); 
```

The arguments here are dose `amt` and the dosing `compartment` number. Notice
that we don't pass in `self`, but rather we get the object back (as `dose`) 
for us to work with. 

To create an object for a 100 unit **infusion** into compartment 1 with rate of 
5 units / time, call

```{c}
#| eval: false
evt::ev dose = evt::infuse(100, 1, 5); 
```

Again, the arguments are: `amt`, `cmt`, `rate` and we get an object back with 
which we can work. 

### Functions to work on event objects

You can use the following functions to work on the event objects returned by 
`evt::bolus()` and `evt::infuse()`

- `evt::retime(<event object>, <time>)` - set the `time` attribute; this also 
  sets the `now` attribute to `false` so the dose will get scheduled in the 
  future if `<time>` is greater than the current `TIME`   
- `evt::now(<event object>)` - make the event happen `now`; when mrgsolve 
  processes this event object, the `time` attribute will be ignored


### Be sure to send the object back to mrgsolve

When you create an event object through

```{c}
#| eval: false
evt::ev dose = evt::infuse(100, 1, 5); 
```

you have to be sure to "send" the event object (`dose`) object created by the 
call back to mrgsolve for processing.

New in mrgsolve 1.4.1 is a `push()` method in the `self` object that lets you 
"push" the event back for processing. For the dose object, it would look like

```{c}
#| eval: false
self.push(dose);
```

The previous syntax for pushing event objects back was pretty technical and
difficult to remember. That old syntax is still valid, but we recommend
calling `push()` as shown above.


### Example 

Model `evtools-2.mod` shows an example of creating an event object, retiming
the dose and sending it back to mrgsolve. We'll start an infusion of 100 mg 
over 28 hours and have it start 12 hours into the simulation.

::: {.callout-note collapse="true" appearance="simple"}
# See the full model 2 code
```{c, code = readLines("evtools-2.mod"), eval = FALSE}
```
:::


```{r}
mod <- mread("evtools-2.mod")

out <- mrgsim(mod, end = 72, delta = 0.2) 

plot(out)
```


## An object to implement a full dosing regimen

In the previous sections, we've looked ways you can trigger a single 
dose from within your model file. You could trigger a sequence of doses
(e.g., once-daily dosing) by using these functions with a little bit 
of bookkeeping. But it would be convenient to just tell mrgsolve that 
you want

- a certain dose
- given at a certain interval
- for a certain duration

This is what the `evt::regimen` class will do for you via the `evtools` 
namespace. In addition to just starting the regimen, you can _change_
the regimen (dose amount, dose interval, anything) at any point in the 
simulation. 

This requires a little more coding that the convenience functions we 
discussed earlier. In the following sections, we will talk you through 
each part in order and then show a complete example.

### Setting up a `regimen` object

To create the regimen object, you have to declare this in the 
`$GLOBAL` block

```{c}
#| eval: false
$GLOBAL
evt::regimen reg;
```

When you create the object in `$GLOBAL`, you are allowing any other 
block to interact with or modify that object. 

### Initializing the `regimen` object

We initialize by passing in the `self` object to the `init()` method. This makes
sure the `regimen` can communicate with mrgsolve (via `self`). You only need to 
do this once, so you can write this in either `$PREAMBLE` 

```{c}
#| eval: false
$PREAMBLE
reg.init(self);
```

or in `$PK` (it's ok to do this multiple times)

```{c}
#| eval: false
$PK 
if(NEWIND < 1) {
  reg.init(self);
}
```

### Setting up the `regimen` object

For every subject, we want to set (or reset) this object to the starting dose,
interval, etc. There are a series of "setter" functions that allow you to set
each of these attributes For a 100 mg infusion into the first compartment over 
1.5 hours every 24 hours for a week, it would look like


```{c}
#| eval: false
$PK
if(NEWIND <= 1) {
  reg.init(self); 
  reg.amt(100); 
  reg.cmt(1);
  reg.rate(reg.amt() / 1.5);
  reg.ii(24);
  reg.until(168);
}
```

Note that you will probably want to avoid hard-coding these numbers in to 
your model. It will work better if you pass them as parameters, so they 
can be adjusted from simulation to simulation.

Also note that I've put this in `$PK` because we are setting up 
the object at the start of each new individual in the problem. 

### Execute the regimen

Once you have everything set up, call `execute()` to actually start 
giving the doses; this should be done in `$ERROR`.

```{c}
#| eval: false
$ERROR 
reg.execute();
```

That's it! Your dosing regimen is now active. 

### Example 

Model `evtools-3.mod` gives a very simple example of setting up a 
dosing regimen using `evt::regmen`.

::: {.callout-note collapse="true" appearance="simple"}
# See the full model 3 code

```{c, code = readLines("evtools-3.mod"), eval = FALSE}
```
:::

```{r}
mod <- mread("evtools-3.mod")

out <- mrgsim(mod, end = 200, delta = 0.1)

plot(out)
```

Note that we didn't use a data set for this simulation; all of the 
doses in the regimen come from the `reg` object we set up.

### Update the dose regimen

What if we want to make changes to the regimen? Say we have a PKPD
model and want to lower the dose whenever the PD marker gets too 
low or too high? 

This is handled naturally within the `evt::regimen` framework by 
calling the same setter functions you used to set / reset the 
`regimen` object at the start of the problem as shown in the next
example.


### Example

Model `evtools-4.mod` gives an example of dynamically changing the dose
using `evt::regmen`.

In this example, we have a indirect response PKPD model where concentration
inhibits the production of the response. The EC50 is 7 ng / mL but with
substantial between subject variability.

Every subject starts on 200 mg once daily. Once a week, 
we'll reduce the dose by 25% if the PD response is smaller 
than 3,000. This isn't terribly sophisticated decision rule
but we'll stick with it for simplicity. 


::: {.callout-note collapse="true" appearance="simple"}
# See the full model 4 code

```{c, code = readLines("evtools-4.mod"), eval = FALSE}
```
:::


We'll simulate 12 random subjects

```{r}
idata <- expand.idata(ID = seq(12), DOSE = 200, UNTIL = 2400)
```

```{r}
#| fig-width: 8
#| fig-height: 6
mod <- mread("evtools-4.mod", outvars = "PD,CP,dose,ec50")

set.seed(12345)

out <- mrgsim(
  mod, 
  idata = idata, 
  carry_out = "dose_start = DOSE",
  end = 8*168
)
```

```{r}
#| include: false
out <- mutate(out, ec50 = factor(round(ec50, 2)))
```


Look at PK, PD, and dose versus time; I'll facet the plots by the simulated 
EC50, from lowest to highest. 


First, concentration versus time

```{r}
ggplot(out, aes(time, CP, col = ec50)) + 
  geom_line() + facet_wrap(~ec50)
```

Next, pharmacodynamics versus time

```{r}
ggplot(out, aes(time, PD, col = ec50)) + 
  geom_line() + facet_wrap(~ec50)
```

Finally, the current dose versus time

```{r}
ggplot(out, aes(time, dose, col = ec50)) + 
  geom_line() + facet_wrap(~ec50) + ylim(0, NA)
```

Finally, we can look at how doses, PK and PD fared at the end of the simulation.
Only a handful of subjects stayed at the starting dose; most got dose reduced
with some ending on doses far below the 200 mg starting dose.

```{r}
out %>% group_by(ID) %>% slice(n()) %>% ungroup() %>% arrange(ec50)
```

## Dynamic change in dosing interval

Model `evtools-5.mod` gives an example of dynamically changing the dose
interval using `evt::regmen`.

In this last example, we'll change the dosing interval over the course of the
simulation. To start, dosing will be every 24 hours. Then, the dosing interval
will be cut in half (every 12 hours) while doubling the dose amount; this will
happen after the first week of dosing.

```{c}
#| eval: false
$ERROR
if(TIME==168 && EVID > 0) {
  reg.ii(12);
  reg.amt(DOSE/2);
}
```

At 300 hours, we'll bring the dose back to double the starting value and change
the dosing interval to every 48 hours

```{c}
#| eval: false
$ERROR
if(evt::near(TIME, 168) && EVID > 0) {
  reg.ii(reg.ii()/2.0);
  reg.amt(reg.amt()/2.0);
}

if(evt::near(TIME, 300) && EVID > 0) {
  reg.ii(reg.ii()*4.0);
  reg.amt(reg.amt()*4.0);
}
```



::: {.callout-note collapse="true" appearance="simple"}
# See the full model 5 code

```{c, code = readLines("evtools-5.mod"), eval = FALSE}
```
:::


```{r}
mod <- mread("evtools-5.mod")

mrgsim(mod, end = 600, delta = 0.1) %>% plot()
```

### Force the model to stop at dose times

This model uses the `object.flagnext()` setter. When we "flag" the next dose, 
we tell mrgsolve to _always_ stop the simulation when we expect the next dose
to be given. This is a hard stop with a reset / reinitialization of the ODE 
solver. 

This isn't strictly necessary in this simulation because we already have
observation records at all of the times when doses might be due (delta is set to
0.1 here). But you can use `object.flagnext()` in case you don't want to sample
that intensively or in case you can't be _sure_ the ODE solver will otherwise
stop at the time when you might way to give a dose. To be clear: you must make
sure the system "hits" all of the dose times. Usually this is done at
observation times. If it can't be guaranteed at observation times, then you need
to tell the problem to flag the next dose times via `object.flagnext()`.

## Remember: there (usually) is no data set

As a general consideration for most or all of the functionality in `evtools`,
it's important to remember that you don't need a data set for these simulations.
Normally you do need one for doses, at least. This gives a signal to mrgsolve
when to stop and actually give the doses and this is done _before_ the
simulation starts. With dynamic dosing within the model itself, it's different:
we are making dosing decisions from minute to minute, giving a dose when it is
due.

This means there is more pressure on _you_ to make sure you are requesting
observations at times when you might need to give a dose. If you don't do that,
there is no reason why mrgsolve will stop to give a dose when you think it
should. There is some functionality baked into these tools to help that, but you
need to be aware of the model time and when the model might be stopping to let
you make an intervention. This isn't always very difficult to do, but it could
be a little surprising if you forget to consider this issue.

Along the same lines, be very careful when requesting that model stops to give 
a dose based on `TIME` alone. For example I might want the model to stop 
at 24 hours to give a dose

```{c}
#| eval: false
if(TIME==24) <give a dose>;
```

This seems like a very reasonable thing to do. But do you know that the model
will only stop once at `TIME==24`? could there be multiple stops at `TIME==24`
that would give you multiple doses in this case?

I'd recommend refactoring this check to include `EVID` as well

```{c}
#| eval: false
if(TIME==24 && EVID==0) <give a dose>;
```

Here, assuming we have a single time vector for each individual, you can know
that the model stops only once for an observation at 24 hours and you won't get
a second dose for another, non-EVID==0 record.

Also, what if we wanted this to happen

```{c}
#| eval: false
if(TIME==14.2 && EVID==0) <give a dose>;
```

But passed in a time vector of 

```{r}
seq(0,24,1)
```

In this case, the model _will not stop_ at 14.2 hours because we only have whole
number observation times.

Again, most of the time it's not difficult to easily get around these issues;
but please do be cautious when planning your simulation inputs.

If you do run into trouble here, it can be helpful to pass in a data set with
more carefully thought out observations. Or, write some R code to create a data
set with milestones coded with different non-zero event IDs that you can check
in your model code to see if something needs to happen. This seems like a lot of
work up front, but it can actually save you time fixing issues down the road.

