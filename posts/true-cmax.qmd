---
title: "Simulate true Cmax with ODE"
subtitle: > 
  This post outlines some considerations when simulating a true Cmax in your
  PK model using differential equations.
author: Kyle Baron
date: 2024-11-14
categories: 
- Cmax
- ODE
editor_options: 
  chunk_output_type: console
---

It's a common practice to find a true maximum concentration after a dose 
(Cmax) through simulation from a PK model written using differential equations. 
In this post, we'll show this implementation and note some important points
to consider when using this method for an infusion. My thanks to 
[FÃ©licien Le Louedec](https://www.linkedin.com/in/f%C3%A9licien-le-louedec-5a9736152/)
for discussion of the issue and inspiration to create the post.


## Implementation 

The true Cmax approach involves the following steps:

1. Initialize a variable (like `Cmax`) to zero when starting on a new individual
   or with a subsequent dose within the same individual.
2. Calculate concentration in the `$DES` block (`CPode`) . 
3. Update `Cmax` to the value of `CPode` calculated in `$DES` whenever `CPode` 
   is greater than the current value of `Cmax`. 

The code might look like this


```{r, code = readLines("true-cmax.mod")}
#| eval: false

```

I call this a "true" Cmax because the ODE solver will need to explore the shape
of the concentration-time profile around Cmax in detail to understand when the
concentration stops increasing and starts to decrease. And the solver will
explore this part of the curve whether or not you ask for simulated output at
the time of Cmax (Tmax) and you can get the true Cmax by logging the
concentration at Tmax. If, instead, you simulated, say, every hour and then took
the maximum `CP` over the dosing interval just from the output records, it will
be an approximate Cmax since you likely didn't ask for an output time exactly at
Tmax.


## Dose into extravascular compartment

After loading packages and our model, let's calculate Cmax for an extravascular
dose. We set the default output time step (`delta`) to 6 hours to reduce the 
resolution of the simulated output; this is pretty extreme, but I wanted to 
make the point that we'll get poor approximation of Cmax if we only look at `CP` 
on output records. In other words, we _have_ to use the ODE-derived Cmax to get 
a the true value back. 

```{r}
#| message: false
library(mrgsolve)
library(dplyr)

mod <- mread("true-cmax.mod", delta = 6) 
```

We'll put 1000 mg into the depot compartment as a single dose.

```{r}
dose <- ev(amt = 1000, cmt = 1)
```

On simulation, we can check the maximum value of `CP` (calculated only at output
records) and `Cmax` (calculated with the code in `$DES`). 

```{r}
out <- mrgsim(mod, dose)

plot(out, scales = "same")
```

And these are the results from the different approaches.

```{r}
max(out$CP)   # Concentration from output records
max(out$Cmax) # Max concentration from $DES
```

We see that 

1. `CP` isn't very accurate due to low-resolution output in the simulation
2. `Cmax` is higher, reflecting the "true" Cmax

We can run this simulation with _much_ smaller `delta` and with some more strict
settings for the ODE solver.

```{r}
out2 <- mrgsim(mod, dose, delta = 1e-3, rtol = 1e-12, hmax = 1e-3)

max(out2$CP)   # Concentration from output records
max(out2$Cmax) # Max concentration from $DES
```
Here, we see good agreement with the approximated Cmax and the true Cmax.

But we don't _need_ to go to these lengths; we can get a good approximation of
Cmax just by reducing `delta` to a reasonably small value.

```{r}
out3 <- mrgsim(mod, dose, delta = 0.1)

true <- max(out3$Cmax)
approx <- max(out3$CP)

approx

100*(approx-true)/true
```

But note this is likely problem-dependent: a smaller `delta` value may be 
required for a good approximation in certain problems. But I find this approach
works well for most situations.


## Infusion dosing

Some care must be taken when utilizing the approach for doses that are
administered by infusion into the central compartment. In this case, the true
Cmax happens at the end of the infusion and mrgsolve creates a discontinuity in
the simulation when the infusion is turned off. When the ODE solver runs into
this discontinuity, it will "overshoot" the infusion end time and then get the
right solution by interpolating back in time. This isn't a bug in the solver;
it's a feature, enabling the ODE solver to more efficiently run through your
simulation. The trouble is with the code we have in the model for tracking Cmax:
the logged value will keep increasing during the overshoot period and we will
have a higher than expected Cmax value at the end of the simulation. This part
of the vignette will demonstrate this behavior and show you some ways to address
it.


Let's create a new event object infusing the dose into the central compartment. 

```{r}
dose <- ev(amt = 1000, rate = 149, cmt = 2)
```

We expect the infusion to end at `6.711409` hours 

```{r}
#' This infusion ends at 
end <- dose$amt / dose$rate
end
```

and the "true" Cmax  for the infusion is `35.08074`
```{r}
out <- mrgsim_df(mod, event = dose, end = -1, add = end, obsonly = TRUE)

select(out, time, CP)
```


But what happens when we assess Cmax with our code in `$DES`? We see that the
reported Cmax is _higher_ than the true Cmax.

```{r}
out <- mrgsim(mod, event = dose)

max(out$Cmax) # Max concentration from $DES
```

This happens because the ODE solver overshoots the end of the infusion and 
corrects this overshoot later; but our Cmax logging code can't deal with 
the overshoot and retains the Cmax value that was falsely inflated
during that overshoot. 


We can verify this is what is happening by reducing `hmax`, the maximum step 
size. When `hmax` is smaller, the ODE solver takes smaller steps, the 
overshoot won't be as severe, and the simulated Cmax will be closer to the 
true value. 

```{r}
out <- mrgsim(mod, event = dose, hmax = 1e-3)

max(out$Cmax) # Max concentration from $DES
```

Now, our Cmax is looking better. We can get even closer by lowering 
`delta` and `rtol`

```{r}
out <- mrgsim(mod, event = dose, hmax = 1e-3, delta = 1e-4, rtol = 1e-12)

max(out$Cmax) # Max concentration from $DES
```

Now, we're getting much closer to the true Cmax value. Of course, there is a 
cost to this: all of these changes will cause the ODE solver to be less efficient
and the simulation will take longer. 

Here's what happens with the reasonable approximation we used earlier.

```{r}
out4 <- mrgsim(mod, event = dose, delta = 0.1)

max(out4$CP) # Concentration from output records
```

The approximate Cmax is a little off the true, but still pretty reasonable.

```{r}
true <- max(out$Cmax)
approx <- max(out$CP)
100 * (approx - true) / true
```


### Get Cmax from the end of the infusion

As an alternative, we can get Cmax as the predicted concentration exactly at the
end of the infusion. It is possible to do this in mrgsolve right now, but I'm
not going to publish it here since there is no public api for doing it. If you
really need it, contact me and I'll help you out. I'll be working on public api
for testing for end of infusion and update the vignette when that gets rolled
out. In the meantime, I'll continue to use the reasonable approximation for 
most cases. 
