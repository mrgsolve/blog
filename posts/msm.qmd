---
title: "Estimate multi-state model with mrgsolve"
author: Kyle Baron
date: 05-10-2024
categories:
- evtools
- msm
- example
- draft
---


# Introduction 

This post shows how you can fit a multi-state model with mrgsolve. The post is 
still in draft mode, but I'm pushing it out to the blog in order to share it 
with someone who was asking about it. 

Updated July 29, 2024 to use mrgsolve 1.5.1 which introduces a `replace()`
function in the `evt` namespace (see the
[evtools](https://mrgsolve.org/user-guide/plugins.html#sec-plugin-evtools)
plugin). The `evt::replace()` syntax is just like `evt::bolus()`, but we replace
the the amount in the indicated compartment, rather than adding to it. This
utilizes `EVID = 8`, a long-standing feature in mrgsolve, which can be
conveniently called from _within_ your model starting with 1.5.1.


```{r}
#| message: false
#| warning: false
library(msm)
library(mrgsolve)
library(dplyr)
library(minqa)
options(pillar.width = Inf)
```

We'll estimate a multi-state model using the `cav` data from the msm package 
using both msm and mrgsolve.

The `cav` data is a "series of approximately yearly angiographic examinations of 
heart transplant recipients. The state at each time is a grade of cardiac 
allograft vasculopathy (CAV), a deterioration of the arterial walls." 
([link](https://chjackson.github.io/msm/reference/cav.html)). 


```{r}
statetable.msm(state, PTNUM, data=cav)
```

There are four states in the CAV data set

1. No CAV
1. Mild or moderate CAV
1. Severe CAV
1. Death

## Fit the model with msm

We'll use this transition matrix

```{r}
qq <- rbind(
  c(0, 0.25, 0, 0.25), 
  c(0.166, 0, 0.166, 0.166),
  c(0, 0.25, 0, 0.25), 
  c(0, 0, 0, 0)
)
qq
```
Fit the model with `deathexact = 4`, indicating that `A4` is an absorbing 
state whose time of entry is known exactly, but with unknown transient state
just prior to death.

```{r}
cav.msm <- msm(
  state ~ years, 
  subject = PTNUM, 
  data = cav,
  qmatrix = qq, 
  deathexact = 4
)

cav.msm
```

msm provides some visualization of the result

```{r}
plot(cav.msm)
```

## Now use mrgsolve

### Data

Modify the data to use with mrgsolve, adding columns for `ID` and `TIME`

```{r}
data <- rename(
  as_tibble(cav), 
  ID = PTNUM, 
  time = years
) 
```

The data set is really fairly simple

```{r}
head(data, n = 4)
```
- The `state` column marks the state at the examination, ranging from 1 
  (no CAV) to 4 (death)
- Every subject starts in `state` 1
- There are also some covariates that we won't use in this example

You can also verify that there are no records in the data set to reset or dose
into any compartment; we'll handle all of that from _inside_ the model.


### Model 

Set up a model with the four states 

```{c, code = readLines("msm-cav.mod"), eval = FALSE, filename="msm-cav.mod"}

```

The key to this model is the `evt::replace()` function, which will reset all
compartments to `0` when there is an examination and then initialize the
appropriate compartment with a `1` based on the value of `state` in the data
set. We do this with a simple `for` loop in C++. The `replace()` functionality
is available in the `evtools` plugin starting with mrgsolve 1.5.1.

### Fit

Load the model and set up for estimation

```{r}
mod <- mread("msm-cav.mod")
```

The initial estimates will be whatever we wrote into the model file

```{r}
theta <- as.numeric(param(mod))
theta <- theta[grep("^k", names(theta))]
tnames <- names(theta)
```

This function takes in a set of parameters and returns the -2 log-likelihood
returned from the model. 

```{r}
pred <- function(p, data) {
  p <- lapply(p, exp)
  names(p) <- tnames
  mod <- param(mod, p)
  out <- mrgsim_q(mod, data)
  -2*sum(log(out$Y))
}
```

Use `minqa::newuoa()` to fit the model

```{r}
fit <- newuoa(
  par = log(theta), 
  fn = pred, 
  data = data, 
  control = list(iprint = 0)
)
```

## Compare msm and mrgsolve fits

The final objective function values for the msm and mrgsolve fits are similar

```{r}
fit$fval
cav.msm$minus2loglik
```

Compare estimates (there might be a naming issue on the `cav.msm` estimates, 
but I think the values match up). 

```{r}
est <- exp(fit$par)

names(est) <- tnames

est %>% sort()

exp(cav.msm$estimates) %>% sort()
```
