---
title: "Estimate multi-state model with mrgsolve"
author: Kyle Baron
date: 05-10-2024
categories:
- example
- draft
---


# Introduction 

This post shows how you can fit a multi-state model with mrgsolve. The post is 
still in draft mode, but I'm pushing it out to the blog in order to share it 
with someone who was asking about it. 

```{r}
#| message: false
#| warning: false
library(msm)
library(mrgsolve)
library(dplyr)
library(minqa)
options(pillar.width = Inf)
```

We'll estimate a multi-state model using the `cav` data from the msm package 
using both msm and mrgsolve.

```{r}
statetable.msm(state, PTNUM, data=cav)
```

## Fit the model with msm

We'll use this transition matrix

```{r}
qq <- rbind(
  c(0, 0.25, 0, 0.25), 
  c(0.166, 0, 0.166, 0.166),
  c(0, 0.25, 0, 0.25), 
  c(0, 0, 0, 0)
)
qq
```

```{r}
cav.msm <- msm(
  state ~ years, 
  subject = PTNUM, 
  data = cav,
  qmatrix = qq, 
  deathexact = 4
)

cav.msm
```

```{r}
plot(cav.msm)
```


## Now use mrgsolve

### Set up

Modify the data to use with mrgsolve

```{r}
data <- rename(
  as_tibble(cav), 
  ID = PTNUM, 
  time = years
) 
```


Set up a model with the four states

```{r}

code <- '
$CMT A1 A2 A3 A4

$PLUGIN autodec evtools

$PARAM
k12 = 0.1/2 
k21 = 0.1/2
k23 = 0.1/2
k32 = 0.1/2
k14 = 0.1/2
k24 = 0.1/2
k34 = 0.1/2

$INPUT 
firstobs = 0
state = 1
statemax = 1

$GLOBAL
void resetCMT(databox& self, const double amt, const int cmt) {
  evt::ev x = evt::bolus(amt, cmt);
  x.evid = 8;
  self.push(x);
}

$MAIN 
A1_0 = 1;
A2_0 = 0; 
A3_0 = 0; 
A4_0 = 0;

$DES

dxdt_A1 = -A1 * k12 + A2 * k21                       - A1 * k14;
dxdt_A2 =  A1 * k12 - A2 * k21 - A2 * k23 + A3 * k32 - A2 * k24;
dxdt_A3 =  A2 * k23 - A3 * k32                       - A3 * k34;
dxdt_A4 =  A1 * k14 + A2 * k24 + A3 * k34;

$ERROR

if(state==1 && EVID==0) Y = A1;
if(state==2 && EVID==0) Y = A2;
if(state==3 && EVID==0) Y = A3;
if(state==4 && EVID==0) {
  Y = A1 * k14 + A2 * k24 + A3 * k34;
}

if(EVID==0) {
  for(int i = 1; i <= 4; ++i) {
    resetCMT(self, 0, i);
  }
  resetCMT(self, 1, state);
}

$CAPTURE Y
'
```

The key to this model is the `resetCMT()` function, which will reset all 
compartments to `0` when there is a transition and then initialize the appropriate
compartment with a `1`. 

### Fit

Load the model and set up for estimation

```{r}
mod <- mcode("msm", code)

theta <- as.numeric(param(mod))
theta <- theta[grep("^k", names(theta))]
tnames <- names(theta)

pred <- function(p, data) {
  p <- lapply(p, exp)
  names(p) <- tnames
  mod <- param(mod, p)
  out <- mrgsim_q(mod, data)
  -2*sum(log(out$Y))
}
```

Fit the model

```{r}
fit <- newuoa(
  par = log(theta), 
  fn = pred, 
  data = data, 
  control = list(iprint = 0)
)
```

### Compare

Compare Objective function value

```{r}
fit$fval
cav.msm$minus2loglik
```

Compare estimates

```{r}
est <- exp(fit$par)

names(est) <- tnames

est %>% sort()

exp(cav.msm$estimates) %>% sort()
```
